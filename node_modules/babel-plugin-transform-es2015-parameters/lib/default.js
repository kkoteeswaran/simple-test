"use strict";

exports.__esModule = true;
exports.visitor = undefined;

var _babelHelperGetFunctionArity = require("babel-helper-get-function-arity");

var _babelHelperGetFunctionArity2 = _interopRequireDefault(_babelHelperGetFunctionArity);

var _babelHelperCallDelegate = require("babel-helper-call-delegate");

var _babelHelperCallDelegate2 = _interopRequireDefault(_babelHelperCallDelegate);

var _babelTemplate = require("babel-template");

var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var buildDefaultParam = (0, _babelTemplate2.default)("\n  let VARIABLE_NAME =\n    ARGUMENTS.length > ARGUMENT_KEY && ARGUMENTS[ARGUMENT_KEY] !== undefined ?\n      ARGUMENTS[ARGUMENT_KEY]\n    :\n      DEFAULT_VALUE;\n");
var buildLooseDefaultParam = (0, _babelTemplate2.default)("\n  if (ASSIGMENT_IDENTIFIER === UNDEFINED) {\n    ASSIGMENT_IDENTIFIER = DEFAULT_VALUE;\n  }\n");
var buildLooseDestructuredDefaultParam = (0, _babelTemplate2.default)("\n  let ASSIGMENT_IDENTIFIER = PARAMETER_NAME === UNDEFINED ? DEFAULT_VALUE : PARAMETER_NAME ;\n");
var buildCutOff = (0, _babelTemplate2.default)("\n  let $0 = $1[$2];\n");

function hasDefaults(node) {
  var _arr = node.params;

  for (var _i = 0; _i < _arr.length; _i++) {
    var param = _arr[_i];
    if (!t.isIdentifier(param)) return true;
  }

  return false;
}

function isSafeBinding(scope, node) {
  if (!scope.hasOwnBinding(node.name)) return true;

  var _scope$getOwnBinding = scope.getOwnBinding(node.name),
      kind = _scope$getOwnBinding.kind;

  return kind === "param" || kind === "local";
}

var iifeVisitor = {
  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
    var scope = path.scope,
        node = path.node;

    if (node.name === "eval" || !isSafeBinding(scope, node)) {
      state.iife = true;
      path.stop();
    }
  },
  Scope: function Scope(path) {
    path.skip();
  }
};
var visitor = exports.visitor = {
  Function: function Function(path) {
    var node = path.node,
        scope = path.scope;
    if (!hasDefaults(node)) return;
    path.ensureBlock();
    var params = path.get("params");

    if (this.opts.loose) {
      var _body = [];

      for (var i = 0; i < params.length; ++i) {
        var param = params[i];

        if (param.isAssignmentPattern()) {
          var left = param.get("left");
          var right = param.get("right");
          var undefinedNode = scope.buildUndefinedNode();

          if (left.isIdentifier()) {
            _body.push(buildLooseDefaultParam({
              ASSIGMENT_IDENTIFIER: left.node,
              DEFAULT_VALUE: right.node,
              UNDEFINED: undefinedNode
            }));

            param.replaceWith(left.node);
          } else if (left.isObjectPattern() || left.isArrayPattern()) {
            var paramName = scope.generateUidIdentifier();

            _body.push(buildLooseDestructuredDefaultParam({
              ASSIGMENT_IDENTIFIER: left.node,
              DEFAULT_VALUE: right.node,
              PARAMETER_NAME: paramName,
              UNDEFINED: undefinedNode
            }));

            param.replaceWith(paramName);
          }
        }
      }

      path.get("body").unshiftContainer("body", _body);
      return;
    }

    var state = {
      iife: false,
      scope: scope
    };
    var body = [];
    var argsIdentifier = t.identifier("arguments");

    function pushDefNode(left, right, i) {
      var defNode = buildDefaultParam({
        VARIABLE_NAME: left,
        DEFAULT_VALUE: right,
        ARGUMENT_KEY: t.numericLiteral(i),
        ARGUMENTS: argsIdentifier
      });
      defNode._blockHoist = node.params.length - i;
      body.push(defNode);
    }

    var lastNonDefaultParam = (0, _babelHelperGetFunctionArity2.default)(node);

    for (var _i2 = 0; _i2 < params.length; _i2++) {
      var _param = params[_i2];

      if (!_param.isAssignmentPattern()) {
        if (!state.iife && !_param.isIdentifier()) {
          _param.traverse(iifeVisitor, state);
        }

        continue;
      }

      var _left = _param.get("left");

      var _right = _param.get("right");

      if (_i2 >= lastNonDefaultParam || _left.isPattern()) {
        var placeholder = scope.generateUidIdentifier("x");
        placeholder._isDefaultPlaceholder = true;
        node.params[_i2] = placeholder;
      } else {
        node.params[_i2] = _left.node;
      }

      if (!state.iife) {
        if (_right.isIdentifier() && !isSafeBinding(scope, _right.node)) {
          state.iife = true;
        } else {
          _right.traverse(iifeVisitor, state);
        }
      }

      pushDefNode(_left.node, _right.node, _i2);
    }

    for (var _i3 = lastNonDefaultParam + 1; _i3 < node.params.length; _i3++) {
      var _param2 = node.params[_i3];
      if (_param2._isDefaultPlaceholder) continue;
      var declar = buildCutOff(_param2, argsIdentifier, t.numericLiteral(_i3));
      declar._blockHoist = node.params.length - _i3;
      body.push(declar);
    }

    node.params = node.params.slice(0, lastNonDefaultParam);

    if (state.iife) {
      body.push((0, _babelHelperCallDelegate2.default)(path, scope));
      path.set("body", t.blockStatement(body));
    } else {
      path.get("body").unshiftContainer("body", body);
    }
  }
};